/*===- handlers.S - SVA Execution Engine Assembly --------------------------===
 *
 *                        Secure Virtual Architecture
 *
 * This file was developed by the LLVM research group and is distributed under
 * the University of Illinois Open Source License. See LICENSE.TXT for details.
 *
 *===----------------------------------------------------------------------===
 *
 * This is x86_64 assembly code used by the SVA Execution Engine.
 * It is in AT&T syntax, which means that the source operand is first and
 * the destination operand is second.
 *
 *===----------------------------------------------------------------------===
 */

/*****************************************************************************
 * Macros
 ****************************************************************************/

/* FreeBSD segment selector for kernel code segment */
#define KERNELCS 0x03

/*
 * Macro: TRAP
 *
 * Description:
 *  Create an assembly language routine that can dispatch the specified trap.
 *  This version is for traps that do not generate their own error code.
 */
#define TRAP(x) \
  .global trap##x ; \
  .type   trap##x, @function ; \
; \
trap##x: \
  /* \
   * Determine whether we interrupted user or supervisor mode execution. \
   */ \
  testw $KERNELCS, 8(%rsp) ; \
  jz 1f ; \
 \
  /* \
   * We came from user mode.  First switch to the kernel %GS register. \
   */ \
  swapgs ; \
 \
  /* \
   * Save the processor state in the per-processor user interrrupt context \
   * structure. \
   */ \
  call SVAsyscall ; \
 \
  /* \
   * Get the current interrupt context link from the per-CPU data structure \
   * and put it into our new interrupt context and put our new interrupt \
   * context at the head of the list. \
   */ \
  movq %gs:0x260, %rdi ; \
  call linkNewIC ; \
  \
  /* \
   * Call the trap handler registered by the OS for this trap. \
   */ \
  movq %gs:0x260, %rbp ; \
  movq $x, %rdi ; \
  call *(interrupt_table+(8*x)) ; \
  \
  /* \
   * Unlink the interrupt context. \
   */ \
  movq %gs:0x260, %rdi ; \
  call unlinkIC ; \
  \
  /* \
   * Restore the processor state. \
   */ \
  call SVAsysret ; \
 \
  /* \
   * Increment the PC by 2 to move past the idiv instruction. \
   */ \
  /* addq $2, 0(%rsp) ; */ \
 \
  /* \
   * Restore the user-space %GS register and return to user-space. \
   */ \
  swapgs ; \
  iretq ; \
 \
1: \
  /* \
   * We are in kernel mode.  Save the state on the kernel stack instead of \
   * in the SVA virtual memory. \
   */ \
 \
  /* Push an error code on to the stack */ \
  pushq $0 ; \
 \
  /* Push the trap number */ \
  pushq $x ; \
\
  /* Run common code for interrupts with error codes */ \
  jmp Trap

/*
 * Macro: ECTRAP
 *
 * Description:
 *  Create an assembly language routine that can dispatch the specified trap.
 *  This version is for traps that generate their own error code.
 */
#define ECTRAP(x) \
  .global trap##x ; \
  .type   trap##x, @function ; \
; \
trap##x: \
  /* \
   * Determine whether we interrupted user or supervisor mode execution. \
   */ \
  testw $KERNELCS, 8(%rsp) ; \
  jz 1f ; \
 \
  /* \
   * We came from user mode.  First switch to the kernel %GS register. \
   */ \
  swapgs ; \
 \
  /* \
   * Save the processor state in the per-processor user interrrupt context \
   * structure. \
   */ \
  call SVAsyscall ; \
 \
  /* \
   * Get the current interrupt context link from the per-CPU data structure \
   * and put it into our new interrupt context and put our new interrupt \
   * context at the head of the list. \
   */ \
  movq %gs:0x260, %rdi ; \
  call linkNewIC ; \
  \
  /* \
   * Call the trap handler registered by the OS for this trap. \
   */ \
  movq %gs:0x260, %rbp ; \
  movq $x, %rdi ; \
  call *(interrupt_table+(8*x)) ; \
 \
  /* \
   * Restore the processor state. \
   */ \
  call SVAsysret ; \
 \
  /* \
   * Unlink the interrupt context. \
   */ \
  movq %gs:0x260, %rdi ; \
  call unlinkIC ; \
  \
  /* \
   * Restore the user-space %GS register and return to user-space. \
   */ \
  swapgs ; \
  iretq ; \
 \
1: \
  /* \
   * We are in kernel mode.  Save the state on the kernel stack instead of \
   * in the SVA virtual memory. \
   */ \
 \
  /* Push the trap number */ \
  pushq $x ; \
\
  /* Run common code for interrupts with error codes */ \
  jmp Trap

/*
 * Macro: INTERRUPT()
 * 
 * Description:
 *  Define the handler for an interrupt.  This is nearly identical to the 
 *  trap code.  It is really only different because it was different in the
 *  original SVA system; the new system does not need to distinguish between
 *  an interrupt and a trap.
 */
#define INTERRUPT(x) \
  .global interrupt##x ; \
  .type   interrupt##x, @function ; \
; \
interrupt##x: \
  /* \
   * Determine whether we interrupted user or supervisor mode execution. \
   */ \
  testw $KERNELCS, 8(%rsp) ; \
  jz 1f ; \
 \
  /* \
   * We came from user mode.  First switch to the kernel %GS register. \
   */ \
  swapgs ; \
 \
  /* \
   * Save the processor state in the per-processor user interrrupt context \
   * structure. \
   */ \
  call SVAsyscall ; \
 \
  /* \
   * Get the current interrupt context link from the per-CPU data structure \
   * and put it into our new interrupt context and put our new interrupt \
   * context at the head of the list. \
   */ \
  movq %gs:0x260, %rdi ; \
  call linkNewIC ; \
  \
  /* \
   * Call the trap handler registered by the OS for this trap. \
   */ \
  movq %gs:0x260, %rbp ; \
  movq $x, %rdi ; \
  call *(interrupt_table+(8*x)) ; \
 \
  /* \
   * Restore the processor state. \
   */ \
  call SVAsysret ; \
 \
  /* \
   * Unlink the interrupt context. \
   */ \
  movq %gs:0x260, %rdi ; \
  call unlinkIC ; \
  \
  /* \
   * Restore the user-space %GS register and return to user-space. \
   */ \
  swapgs ; \
  iretq ; \
 \
1: \
  /* \
   * We are in kernel mode.  Save the state on the kernel stack instead of \
   * in the SVA virtual memory. \
   */ \
 \
  /* Push an error code on to the stack */ \
  pushq $0 ; \
 \
  /* Push the trap number */ \
  pushq $x ; \
\
  /* Run common code for interrupts with error codes */ \
  jmp Trap


/*****************************************************************************
 * Data Section
 ****************************************************************************/
.data
.comm interrupt_table, 2048

/*****************************************************************************
 * Text Section
 ****************************************************************************/
.text

.global SVAsyscall
.type SVAsyscall, @function

.global SVAsysret
.type SVAsysret, @function

.global secmemtrap
.type secmemtrap, @function

.global secfreetrap
.type secfreetrap, @function

/*
 * Function: saveRegs
 *
 * Description:
 *  This function saves the registers into the interrupt context pointed to
 *  by %rbp.
 */
saveRegs:
  /* Save the registers into the interrupt context */
  movw %fs,  0x10(%rbp)
  movw %gs,  0x12(%rbp)
  movw %es,  0x14(%rbp)

  movq %rdi, 0x18(%rbp)
  movq %rsi, 0x20(%rbp)

  movq %rax, 0x28(%rbp)
  movq %rbx, 0x30(%rbp)
  movq %rcx, 0x38(%rbp)
  movq %rdx, 0x40(%rbp)

  movq %r8,  0x48(%rbp)
  movq %r9,  0x50(%rbp)
  movq %r10, 0x58(%rbp)
  movq %r11, 0x60(%rbp)
  movq %r12, 0x68(%rbp)
  movq %r13, 0x70(%rbp)
  movq %r14, 0x78(%rbp)
  movq %r15, 0x80(%rbp)

  retq

/*
 * Function: restoreRegs
 *
 * Description:
 *  Copy the registers from the interrupt context back on to the processor.
 */
restoreRegs:
#if 0
  movw 0x10(%rbp), %fs
  movw 0x12(%rbp), %gs
  movw 0x14(%rbp), %es
#endif

  movq 0x18(%rbp), %rdi
  movq 0x20(%rbp), %rsi

  movq 0x28(%rbp), %rax
  movq 0x30(%rbp), %rbx
  movq 0x38(%rbp), %rcx
  movq 0x40(%rbp), %rdx

  movq 0x48(%rbp), %r8
  movq 0x50(%rbp), %r9
  movq 0x58(%rbp), %r10
  movq 0x60(%rbp), %r11
  movq 0x68(%rbp), %r12
  movq 0x70(%rbp), %r13
  movq 0x78(%rbp), %r14
  movq 0x80(%rbp), %r15

  ret

/*
 * Function: Trap
 *
 * Description:
 *  This code is common code for all trap handlers that handle traps with
 *  no x86_64 error code.
 */
Trap:
  /* Save the %rbp register since we'll need to use it */
  pushq %rbp

  /* Allocate an interrupt context on the stack and fill it in */
  subq $136, %rsp

  /* Save the registers into the interrupt context */
  movq %rsp, %rbp
  callq saveRegs

  /*
   * Get the current interrupt context link from the per-CPU data structure
   * and put it into our new interrupt context and put our new interrupt
   * context at the head of the list.
   */
  movq %rsp, %rdi
  call linkNewIC

  /*
   * Call the trap handler registered by the OS for this trap.
   */
  movq 0x90(%rsp), %rdi
  movq $interrupt_table, %rax
  call *(%rax,%rdi,8)

  /*
   * Unlink the interrupt context.
   */
  movq %rsp, %rdi
  call unlinkIC

  /*
   * Copy the registers from the interrupt context back on to the processor.
   */
  call restoreRegs

  /* Remove the interrupt context and the error code */
  addq $136, %rsp
  popq %rbp
  addq $16, %rsp
  iretq

/*
 * Trap: SVAsyscall
 *
 * Description:
 *  This trap handles system call entry.
 *
 * Notes:
 *  The GS register should be pointing to the base of the interrupt context
 *  for the current processor.
 */
SVAsyscall:
  /*
   * Get a pointer to the current processor's interrupt context.
   */
  pushq %rbp
  movq %gs:0x260, %rbp

  /*
   * Set the next link to NULL (the user-space interrupt context should always
   * be the first in the interrupt context chain).
   */
  movq $0, 0x00(%rbp)

  /*
   * Save a copy of the interrupt context into SVA memory.
   */
  callq saveRegs

  /*
   * Copy the registers saved by the processor into the user-space interupt
   * context.
   */
  movq 0x10(%rsp), %rax
  movq %rax, 0xa0(%rbp)
  movq 0x18(%rsp), %rax
  movq %rax, 0xa8(%rbp)
  movq 0x20(%rsp), %rax
  movq %rax, 0xb0(%rbp)
  movq 0x28(%rsp), %rax
  movq %rax, 0xb8(%rbp)
  movq 0x30(%rsp), %rax
  movq %rax, 0xc0(%rbp)

  /*
   * Restore %rax from the saved register state.
   */
  movq 0x28(%rbp), %rax

  /*
   * Save a copy of the %rbp register into the interrupt context and then
   * restore it to its saved value.
   */
  popq 0x88(%rbp)
  movq 0x88(%rbp), %rbp

  ret

SVAsysret:
  /*
   * Get a pointer to the current processor's interrupt context.
   */
  movq %gs:0x260, %rbp

  /*
   * Copy the registers from the interrupt context back on to the processor.
   */
  call restoreRegs

  /* Restore %rbp last */
  movq 0x88(%rbp), %rbp
  ret

  /* Exit the system call */
  sysretq

/*
 * Trap: secmemtrap
 *
 * Description:
 *  This trap handles secure memory allocations.
 *
 * Inputs:
 *  %rdi - This register should hold the size, in bytes, of secure memory to
 *         allocate.
 *
 * Return value:
 *  %rax - This register should hold a pointer to the allocated memory.
 */
secmemtrap:
  /* Use the swapgs instruction to switch to the kernel map */
  swapgs

  /* Call the secure memory allocator function */
  call  allocSecureMemory

  /* Use the swapgs instruction to switch back to user mode */
  swapgs

  /* Return from the trap */
  iretq

/*
 * Trap: secfreetrap
 *
 * Description:
 *  This trap handles secure memory deallocations.
 *
 * Inputs:
 *  %rdi - The pointer to the first byte of secure memory to deallocate.
 *  %rsi - This register should hold the size, in bytes, of secure memory to
 *         allocate.
 */
secfreetrap:
  /* Use the swapgs instruction to switch to the kernel map */
  swapgs

  /* Call the secure memory deallocator function */
  call  freeSecureMemory

  /* Use the swapgs instruction to switch back to user mode */
  swapgs

  /* Return from the trap */
  iretq

/* Define the trap handlers */
TRAP(0)
TRAP(1)
TRAP(2)
TRAP(3)
TRAP(4)
TRAP(5)
TRAP(6)
TRAP(7)
ECTRAP(8)
TRAP(9)
ECTRAP(10)
ECTRAP(11)
ECTRAP(12)
ECTRAP(13)
TRAP(15)
TRAP(16)
TRAP(18)
TRAP(19)
TRAP(20)
TRAP(21)
TRAP(22)
TRAP(23)
TRAP(24)
TRAP(25)
TRAP(26)
TRAP(27)
TRAP(28)
TRAP(29)
TRAP(30)
TRAP(31)

/*
 * Old PC IRQ Interrupts
 *  33 - Keyboard
 *  38 - Floppy Disk
 *  44 - PS/2 Mouse
 */
INTERRUPT(32)
INTERRUPT(33)
INTERRUPT(34)
INTERRUPT(35)
INTERRUPT(36)
INTERRUPT(37)
INTERRUPT(38)
INTERRUPT(39)
INTERRUPT(40)
INTERRUPT(41)
INTERRUPT(42)
INTERRUPT(43)
INTERRUPT(44)
INTERRUPT(45)
INTERRUPT(46)
INTERRUPT(47)
INTERRUPT(48)

/*
 * IO-APIC Interrupts
 */
INTERRUPT(49)
INTERRUPT(57)
INTERRUPT(65)
INTERRUPT(73)
INTERRUPT(89)
INTERRUPT(121)
INTERRUPT(137)
INTERRUPT(153)
INTERRUPT(161)

/*
 * New Local APIC Interrupts
 *  239     : Local APIC Timer
 *  251-255 : SMP APIC Vectors
 */
INTERRUPT(239)
INTERRUPT(251)
INTERRUPT(252)
INTERRUPT(253)
INTERRUPT(254)
INTERRUPT(255)


